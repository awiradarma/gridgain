package config;

import com.mysql.cj.jdbc.MysqlDataSource;
import java.io.InputStream;
import java.sql.Date;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Properties;
import javax.cache.configuration.Factory;
import javax.sql.DataSource;
import org.apache.ignite.cache.CacheAtomicityMode;
import org.apache.ignite.cache.CacheMode;
import org.apache.ignite.cache.QueryEntity;
import org.apache.ignite.cache.QueryIndex;
import org.apache.ignite.cache.QueryIndexType;
import org.apache.ignite.cache.store.jdbc.CacheJdbcPojoStoreFactory;
import org.apache.ignite.cache.store.jdbc.JdbcType;
import org.apache.ignite.cache.store.jdbc.JdbcTypeField;
import org.apache.ignite.cache.store.jdbc.dialect.MySQLDialect;
import org.apache.ignite.configuration.CacheConfiguration;
import org.apache.ignite.configuration.IgniteConfiguration;
import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;
import org.apache.ignite.spi.discovery.tcp.ipfinder.multicast.TcpDiscoveryMulticastIpFinder;

/** This file was generated by Ignite Web Console (12/08/2020, 21:25) **/
public class ClientConfigurationFactory {
    /** Secret properties loading. **/
    private static final Properties props = new Properties();

    static {
        try (InputStream in = IgniteConfiguration.class.getClassLoader().getResourceAsStream("secret.properties")) {
            props.load(in);
        }
        catch (Exception ignored) {
            // No-op.
        }
    }

    /** Helper class for datasource creation. **/
    public static class DataSources {
        public static final MysqlDataSource INSTANCE_dsMySQL_Petclinic = createdsMySQL_Petclinic();

        private static MysqlDataSource createdsMySQL_Petclinic() {
            MysqlDataSource dsMySQL_Petclinic = new MysqlDataSource();

            dsMySQL_Petclinic.setURL(props.getProperty("dsMySQL_Petclinic.jdbc.url"));
            dsMySQL_Petclinic.setUser(props.getProperty("dsMySQL_Petclinic.jdbc.username"));
            dsMySQL_Petclinic.setPassword(props.getProperty("dsMySQL_Petclinic.jdbc.password"));

            return dsMySQL_Petclinic;
        }
    }

    /**
     * Configure grid.
     * 
     * @return Ignite configuration.
     * @throws Exception If failed to construct Ignite configuration instance.
     **/
    public static IgniteConfiguration createConfiguration() throws Exception {
        IgniteConfiguration cfg = new IgniteConfiguration();

        cfg.setClientMode(true);
        cfg.setIgniteInstanceName("ImportedCluster");

        TcpDiscoverySpi discovery = new TcpDiscoverySpi();

        TcpDiscoveryMulticastIpFinder ipFinder = new TcpDiscoveryMulticastIpFinder();

        ipFinder.setAddresses(Arrays.asList("127.0.0.1:47500..47510"));

        discovery.setIpFinder(ipFinder);

        cfg.setDiscoverySpi(discovery);

        cfg.setCacheConfiguration(
            cacheOwnersCache(),
            cachePetsCache(),
            cacheSpecialtiesCache(),
            cacheTypesCache(),
            cacheVetSpecialtiesCache(),
            cacheVetsCache(),
            cacheVisitsCache()
        );

        return cfg;
    }

    /**
     * Create configuration for cache "OwnersCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheOwnersCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("OwnersCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsMySQL_Petclinic;
            };
        });

        cacheStoreFactory.setDialect(new MySQLDialect());

        cacheStoreFactory.setTypes(jdbcTypeOwners(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Long");
        qryEntity.setValueType("com.gmail.awiradarma.model.Owners");
        qryEntity.setKeyFieldName("id");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("id");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("firstName", "java.lang.String");
        fields.put("lastName", "java.lang.String");
        fields.put("address", "java.lang.String");
        fields.put("city", "java.lang.String");
        fields.put("telephone", "java.lang.String");
        fields.put("id", "java.lang.Long");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("firstName", "first_name");
        aliases.put("lastName", "last_name");

        qryEntity.setAliases(aliases);

        ArrayList<QueryIndex> indexes = new ArrayList<>();

        QueryIndex index = new QueryIndex();

        index.setName("last_name");
        index.setIndexType(QueryIndexType.SORTED);

        LinkedHashMap<String, Boolean> indFlds = new LinkedHashMap<>();

        indFlds.put("lastName", false);

        index.setFields(indFlds);
        indexes.add(index);

        qryEntity.setIndexes(indexes);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeOwners".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeOwners(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(Long.class);
        type.setValueType("com.gmail.awiradarma.model.Owners");
        type.setDatabaseSchema("petclinic");
        type.setDatabaseTable("owners");

        type.setKeyFields(new JdbcTypeField(Types.INTEGER, "id", long.class, "id"));

        type.setValueFields(
            new JdbcTypeField(Types.VARCHAR, "first_name", String.class, "firstName"),
            new JdbcTypeField(Types.VARCHAR, "last_name", String.class, "lastName"),
            new JdbcTypeField(Types.VARCHAR, "address", String.class, "address"),
            new JdbcTypeField(Types.VARCHAR, "city", String.class, "city"),
            new JdbcTypeField(Types.VARCHAR, "telephone", String.class, "telephone")
        );

        return type;
    }

    /**
     * Create configuration for cache "PetsCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cachePetsCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("PetsCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsMySQL_Petclinic;
            };
        });

        cacheStoreFactory.setDialect(new MySQLDialect());

        cacheStoreFactory.setTypes(jdbcTypePets(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Long");
        qryEntity.setValueType("com.gmail.awiradarma.model.Pets");
        qryEntity.setKeyFieldName("id");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("id");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("name", "java.lang.String");
        fields.put("birthDate", "java.sql.Date");
        fields.put("typeId", "java.lang.Long");
        fields.put("ownerId", "java.lang.Long");
        fields.put("id", "java.lang.Long");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("birthDate", "birth_date");
        aliases.put("typeId", "type_id");
        aliases.put("ownerId", "owner_id");

        qryEntity.setAliases(aliases);

        ArrayList<QueryIndex> indexes = new ArrayList<>();

        QueryIndex index = new QueryIndex();

        index.setName("name");
        index.setIndexType(QueryIndexType.SORTED);

        LinkedHashMap<String, Boolean> indFlds = new LinkedHashMap<>();

        indFlds.put("name", false);

        index.setFields(indFlds);
        indexes.add(index);

        index = new QueryIndex();

        index.setName("owner_id");
        index.setIndexType(QueryIndexType.SORTED);

        indFlds = new LinkedHashMap<>();

        indFlds.put("ownerId", false);

        index.setFields(indFlds);
        indexes.add(index);

        index = new QueryIndex();

        index.setName("type_id");
        index.setIndexType(QueryIndexType.SORTED);

        indFlds = new LinkedHashMap<>();

        indFlds.put("typeId", false);

        index.setFields(indFlds);
        indexes.add(index);

        qryEntity.setIndexes(indexes);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypePets".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypePets(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(Long.class);
        type.setValueType("com.gmail.awiradarma.model.Pets");
        type.setDatabaseSchema("petclinic");
        type.setDatabaseTable("pets");

        type.setKeyFields(new JdbcTypeField(Types.INTEGER, "id", long.class, "id"));

        type.setValueFields(
            new JdbcTypeField(Types.VARCHAR, "name", String.class, "name"),
            new JdbcTypeField(Types.DATE, "birth_date", Date.class, "birthDate"),
            new JdbcTypeField(Types.INTEGER, "type_id", long.class, "typeId"),
            new JdbcTypeField(Types.INTEGER, "owner_id", long.class, "ownerId")
        );

        return type;
    }

    /**
     * Create configuration for cache "SpecialtiesCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheSpecialtiesCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("SpecialtiesCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsMySQL_Petclinic;
            };
        });

        cacheStoreFactory.setDialect(new MySQLDialect());

        cacheStoreFactory.setTypes(jdbcTypeSpecialties(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Long");
        qryEntity.setValueType("com.gmail.awiradarma.model.Specialties");
        qryEntity.setKeyFieldName("id");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("id");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("name", "java.lang.String");
        fields.put("id", "java.lang.Long");

        qryEntity.setFields(fields);

        ArrayList<QueryIndex> indexes = new ArrayList<>();

        QueryIndex index = new QueryIndex();

        index.setName("name");
        index.setIndexType(QueryIndexType.SORTED);

        LinkedHashMap<String, Boolean> indFlds = new LinkedHashMap<>();

        indFlds.put("name", false);

        index.setFields(indFlds);
        indexes.add(index);

        qryEntity.setIndexes(indexes);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeSpecialties".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeSpecialties(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(Long.class);
        type.setValueType("com.gmail.awiradarma.model.Specialties");
        type.setDatabaseSchema("petclinic");
        type.setDatabaseTable("specialties");

        type.setKeyFields(new JdbcTypeField(Types.INTEGER, "id", long.class, "id"));

        type.setValueFields(new JdbcTypeField(Types.VARCHAR, "name", String.class, "name"));

        return type;
    }

    /**
     * Create configuration for cache "TypesCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheTypesCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("TypesCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsMySQL_Petclinic;
            };
        });

        cacheStoreFactory.setDialect(new MySQLDialect());

        cacheStoreFactory.setTypes(jdbcTypeTypes(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Long");
        qryEntity.setValueType("com.gmail.awiradarma.model.Types");
        qryEntity.setKeyFieldName("id");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("id");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("name", "java.lang.String");
        fields.put("id", "java.lang.Long");

        qryEntity.setFields(fields);

        ArrayList<QueryIndex> indexes = new ArrayList<>();

        QueryIndex index = new QueryIndex();

        index.setName("name");
        index.setIndexType(QueryIndexType.SORTED);

        LinkedHashMap<String, Boolean> indFlds = new LinkedHashMap<>();

        indFlds.put("name", false);

        index.setFields(indFlds);
        indexes.add(index);

        qryEntity.setIndexes(indexes);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeTypes".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeTypes(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(Long.class);
        type.setValueType("com.gmail.awiradarma.model.Types");
        type.setDatabaseSchema("petclinic");
        type.setDatabaseTable("types");

        type.setKeyFields(new JdbcTypeField(Types.INTEGER, "id", long.class, "id"));

        type.setValueFields(new JdbcTypeField(Types.VARCHAR, "name", String.class, "name"));

        return type;
    }

    /**
     * Create configuration for cache "VetSpecialtiesCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheVetSpecialtiesCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("VetSpecialtiesCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsMySQL_Petclinic;
            };
        });

        cacheStoreFactory.setDialect(new MySQLDialect());

        cacheStoreFactory.setTypes(jdbcTypeVetSpecialties(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("com.gmail.awiradarma.model.VetSpecialtiesKey");
        qryEntity.setValueType("com.gmail.awiradarma.model.VetSpecialties");
        qryEntity.setTableName("vet_specialties");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("vetId");

        keyFields.add("specialtyId");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("vetId", "java.lang.Long");
        fields.put("specialtyId", "java.lang.Long");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("vetId", "vet_id");
        aliases.put("specialtyId", "specialty_id");

        qryEntity.setAliases(aliases);

        ArrayList<QueryIndex> indexes = new ArrayList<>();

        QueryIndex index = new QueryIndex();

        index.setName("specialty_id");
        index.setIndexType(QueryIndexType.SORTED);

        LinkedHashMap<String, Boolean> indFlds = new LinkedHashMap<>();

        indFlds.put("specialtyId", false);

        index.setFields(indFlds);
        indexes.add(index);

        qryEntity.setIndexes(indexes);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeVetSpecialties".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeVetSpecialties(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType("com.gmail.awiradarma.model.VetSpecialtiesKey");
        type.setValueType("com.gmail.awiradarma.model.VetSpecialties");
        type.setDatabaseSchema("petclinic");
        type.setDatabaseTable("vet_specialties");

        type.setKeyFields(
            new JdbcTypeField(Types.INTEGER, "vet_id", long.class, "vetId"),
            new JdbcTypeField(Types.INTEGER, "specialty_id", long.class, "specialtyId")
        );

        type.setValueFields(
            new JdbcTypeField(Types.INTEGER, "vet_id", long.class, "vetId"),
            new JdbcTypeField(Types.INTEGER, "specialty_id", long.class, "specialtyId")
        );

        return type;
    }

    /**
     * Create configuration for cache "VetsCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheVetsCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("VetsCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsMySQL_Petclinic;
            };
        });

        cacheStoreFactory.setDialect(new MySQLDialect());

        cacheStoreFactory.setTypes(jdbcTypeVets(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Long");
        qryEntity.setValueType("com.gmail.awiradarma.model.Vets");
        qryEntity.setKeyFieldName("id");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("id");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("firstName", "java.lang.String");
        fields.put("lastName", "java.lang.String");
        fields.put("id", "java.lang.Long");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("firstName", "first_name");
        aliases.put("lastName", "last_name");

        qryEntity.setAliases(aliases);

        ArrayList<QueryIndex> indexes = new ArrayList<>();

        QueryIndex index = new QueryIndex();

        index.setName("last_name");
        index.setIndexType(QueryIndexType.SORTED);

        LinkedHashMap<String, Boolean> indFlds = new LinkedHashMap<>();

        indFlds.put("lastName", false);

        index.setFields(indFlds);
        indexes.add(index);

        qryEntity.setIndexes(indexes);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeVets".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeVets(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(Long.class);
        type.setValueType("com.gmail.awiradarma.model.Vets");
        type.setDatabaseSchema("petclinic");
        type.setDatabaseTable("vets");

        type.setKeyFields(new JdbcTypeField(Types.INTEGER, "id", long.class, "id"));

        type.setValueFields(
            new JdbcTypeField(Types.VARCHAR, "first_name", String.class, "firstName"),
            new JdbcTypeField(Types.VARCHAR, "last_name", String.class, "lastName")
        );

        return type;
    }

    /**
     * Create configuration for cache "VisitsCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheVisitsCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("VisitsCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsMySQL_Petclinic;
            };
        });

        cacheStoreFactory.setDialect(new MySQLDialect());

        cacheStoreFactory.setTypes(jdbcTypeVisits(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Long");
        qryEntity.setValueType("com.gmail.awiradarma.model.Visits");
        qryEntity.setKeyFieldName("id");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("id");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("petId", "java.lang.Long");
        fields.put("visitDate", "java.sql.Date");
        fields.put("description", "java.lang.String");
        fields.put("id", "java.lang.Long");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("petId", "pet_id");
        aliases.put("visitDate", "visit_date");

        qryEntity.setAliases(aliases);

        ArrayList<QueryIndex> indexes = new ArrayList<>();

        QueryIndex index = new QueryIndex();

        index.setName("pet_id");
        index.setIndexType(QueryIndexType.SORTED);

        LinkedHashMap<String, Boolean> indFlds = new LinkedHashMap<>();

        indFlds.put("petId", false);

        index.setFields(indFlds);
        indexes.add(index);

        qryEntity.setIndexes(indexes);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeVisits".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeVisits(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(Long.class);
        type.setValueType("com.gmail.awiradarma.model.Visits");
        type.setDatabaseSchema("petclinic");
        type.setDatabaseTable("visits");

        type.setKeyFields(new JdbcTypeField(Types.INTEGER, "id", long.class, "id"));

        type.setValueFields(
            new JdbcTypeField(Types.INTEGER, "pet_id", long.class, "petId"),
            new JdbcTypeField(Types.DATE, "visit_date", Date.class, "visitDate"),
            new JdbcTypeField(Types.VARCHAR, "description", String.class, "description")
        );

        return type;
    }
}