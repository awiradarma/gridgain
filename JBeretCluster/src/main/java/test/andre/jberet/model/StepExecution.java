package test.andre.jberet.model;

import java.io.Serializable;
import java.sql.Timestamp;
import java.sql.Timestamp;

/**
 * StepExecution definition.
 * 
 * This file was generated by Ignite Web Console (12/14/2020, 09:58)
 **/
public class StepExecution implements Serializable {
    /** */
    private static final long serialVersionUID = 0L;

    /** Value for jobexecutionid. */
    private long jobexecutionid;

    /** Value for version. */
    private Integer version;

    /** Value for stepname. */
    private String stepname;

    /** Value for starttime. */
    private Timestamp starttime;

    /** Value for endtime. */
    private Timestamp endtime;

    /** Value for batchstatus. */
    private String batchstatus;

    /** Value for exitstatus. */
    private String exitstatus;

    /** Value for executionexception. */
    private String executionexception;

    /** Value for persistentuserdata. */
    private byte[] persistentuserdata;

    /** Value for readcount. */
    private Integer readcount;

    /** Value for writecount. */
    private Integer writecount;

    /** Value for commitcount. */
    private Integer commitcount;

    /** Value for rollbackcount. */
    private Integer rollbackcount;

    /** Value for readskipcount. */
    private Integer readskipcount;

    /** Value for processskipcount. */
    private Integer processskipcount;

    /** Value for filtercount. */
    private Integer filtercount;

    /** Value for writeskipcount. */
    private Integer writeskipcount;

    /** Value for readercheckpointinfo. */
    private byte[] readercheckpointinfo;

    /** Value for writercheckpointinfo. */
    private byte[] writercheckpointinfo;

    /** Empty constructor. **/
    public StepExecution() {
        // No-op.
    }

    /** Full constructor. **/
    public StepExecution(long jobexecutionid,
        Integer version,
        String stepname,
        Timestamp starttime,
        Timestamp endtime,
        String batchstatus,
        String exitstatus,
        String executionexception,
        byte[] persistentuserdata,
        Integer readcount,
        Integer writecount,
        Integer commitcount,
        Integer rollbackcount,
        Integer readskipcount,
        Integer processskipcount,
        Integer filtercount,
        Integer writeskipcount,
        byte[] readercheckpointinfo,
        byte[] writercheckpointinfo) {
        this.jobexecutionid = jobexecutionid;
        this.version = version;
        this.stepname = stepname;
        this.starttime = starttime;
        this.endtime = endtime;
        this.batchstatus = batchstatus;
        this.exitstatus = exitstatus;
        this.executionexception = executionexception;
        this.persistentuserdata = persistentuserdata;
        this.readcount = readcount;
        this.writecount = writecount;
        this.commitcount = commitcount;
        this.rollbackcount = rollbackcount;
        this.readskipcount = readskipcount;
        this.processskipcount = processskipcount;
        this.filtercount = filtercount;
        this.writeskipcount = writeskipcount;
        this.readercheckpointinfo = readercheckpointinfo;
        this.writercheckpointinfo = writercheckpointinfo;
    }

    /**
     * Gets jobexecutionid
     * 
     * @return Value for jobexecutionid.
     **/
    public long getJobexecutionid() {
        return jobexecutionid;
    }

    /**
     * Sets jobexecutionid
     * 
     * @param jobexecutionid New value for jobexecutionid.
     **/
    public void setJobexecutionid(long jobexecutionid) {
        this.jobexecutionid = jobexecutionid;
    }

    /**
     * Gets version
     * 
     * @return Value for version.
     **/
    public Integer getVersion() {
        return version;
    }

    /**
     * Sets version
     * 
     * @param version New value for version.
     **/
    public void setVersion(Integer version) {
        this.version = version;
    }

    /**
     * Gets stepname
     * 
     * @return Value for stepname.
     **/
    public String getStepname() {
        return stepname;
    }

    /**
     * Sets stepname
     * 
     * @param stepname New value for stepname.
     **/
    public void setStepname(String stepname) {
        this.stepname = stepname;
    }

    /**
     * Gets starttime
     * 
     * @return Value for starttime.
     **/
    public Timestamp getStarttime() {
        return starttime;
    }

    /**
     * Sets starttime
     * 
     * @param starttime New value for starttime.
     **/
    public void setStarttime(Timestamp starttime) {
        this.starttime = starttime;
    }

    /**
     * Gets endtime
     * 
     * @return Value for endtime.
     **/
    public Timestamp getEndtime() {
        return endtime;
    }

    /**
     * Sets endtime
     * 
     * @param endtime New value for endtime.
     **/
    public void setEndtime(Timestamp endtime) {
        this.endtime = endtime;
    }

    /**
     * Gets batchstatus
     * 
     * @return Value for batchstatus.
     **/
    public String getBatchstatus() {
        return batchstatus;
    }

    /**
     * Sets batchstatus
     * 
     * @param batchstatus New value for batchstatus.
     **/
    public void setBatchstatus(String batchstatus) {
        this.batchstatus = batchstatus;
    }

    /**
     * Gets exitstatus
     * 
     * @return Value for exitstatus.
     **/
    public String getExitstatus() {
        return exitstatus;
    }

    /**
     * Sets exitstatus
     * 
     * @param exitstatus New value for exitstatus.
     **/
    public void setExitstatus(String exitstatus) {
        this.exitstatus = exitstatus;
    }

    /**
     * Gets executionexception
     * 
     * @return Value for executionexception.
     **/
    public String getExecutionexception() {
        return executionexception;
    }

    /**
     * Sets executionexception
     * 
     * @param executionexception New value for executionexception.
     **/
    public void setExecutionexception(String executionexception) {
        this.executionexception = executionexception;
    }

    /**
     * Gets persistentuserdata
     * 
     * @return Value for persistentuserdata.
     **/
    public byte[] getPersistentuserdata() {
        return persistentuserdata;
    }

    /**
     * Sets persistentuserdata
     * 
     * @param persistentuserdata New value for persistentuserdata.
     **/
    public void setPersistentuserdata(byte[] persistentuserdata) {
        this.persistentuserdata = persistentuserdata;
    }

    /**
     * Gets readcount
     * 
     * @return Value for readcount.
     **/
    public Integer getReadcount() {
        return readcount;
    }

    /**
     * Sets readcount
     * 
     * @param readcount New value for readcount.
     **/
    public void setReadcount(Integer readcount) {
        this.readcount = readcount;
    }

    /**
     * Gets writecount
     * 
     * @return Value for writecount.
     **/
    public Integer getWritecount() {
        return writecount;
    }

    /**
     * Sets writecount
     * 
     * @param writecount New value for writecount.
     **/
    public void setWritecount(Integer writecount) {
        this.writecount = writecount;
    }

    /**
     * Gets commitcount
     * 
     * @return Value for commitcount.
     **/
    public Integer getCommitcount() {
        return commitcount;
    }

    /**
     * Sets commitcount
     * 
     * @param commitcount New value for commitcount.
     **/
    public void setCommitcount(Integer commitcount) {
        this.commitcount = commitcount;
    }

    /**
     * Gets rollbackcount
     * 
     * @return Value for rollbackcount.
     **/
    public Integer getRollbackcount() {
        return rollbackcount;
    }

    /**
     * Sets rollbackcount
     * 
     * @param rollbackcount New value for rollbackcount.
     **/
    public void setRollbackcount(Integer rollbackcount) {
        this.rollbackcount = rollbackcount;
    }

    /**
     * Gets readskipcount
     * 
     * @return Value for readskipcount.
     **/
    public Integer getReadskipcount() {
        return readskipcount;
    }

    /**
     * Sets readskipcount
     * 
     * @param readskipcount New value for readskipcount.
     **/
    public void setReadskipcount(Integer readskipcount) {
        this.readskipcount = readskipcount;
    }

    /**
     * Gets processskipcount
     * 
     * @return Value for processskipcount.
     **/
    public Integer getProcessskipcount() {
        return processskipcount;
    }

    /**
     * Sets processskipcount
     * 
     * @param processskipcount New value for processskipcount.
     **/
    public void setProcessskipcount(Integer processskipcount) {
        this.processskipcount = processskipcount;
    }

    /**
     * Gets filtercount
     * 
     * @return Value for filtercount.
     **/
    public Integer getFiltercount() {
        return filtercount;
    }

    /**
     * Sets filtercount
     * 
     * @param filtercount New value for filtercount.
     **/
    public void setFiltercount(Integer filtercount) {
        this.filtercount = filtercount;
    }

    /**
     * Gets writeskipcount
     * 
     * @return Value for writeskipcount.
     **/
    public Integer getWriteskipcount() {
        return writeskipcount;
    }

    /**
     * Sets writeskipcount
     * 
     * @param writeskipcount New value for writeskipcount.
     **/
    public void setWriteskipcount(Integer writeskipcount) {
        this.writeskipcount = writeskipcount;
    }

    /**
     * Gets readercheckpointinfo
     * 
     * @return Value for readercheckpointinfo.
     **/
    public byte[] getReadercheckpointinfo() {
        return readercheckpointinfo;
    }

    /**
     * Sets readercheckpointinfo
     * 
     * @param readercheckpointinfo New value for readercheckpointinfo.
     **/
    public void setReadercheckpointinfo(byte[] readercheckpointinfo) {
        this.readercheckpointinfo = readercheckpointinfo;
    }

    /**
     * Gets writercheckpointinfo
     * 
     * @return Value for writercheckpointinfo.
     **/
    public byte[] getWritercheckpointinfo() {
        return writercheckpointinfo;
    }

    /**
     * Sets writercheckpointinfo
     * 
     * @param writercheckpointinfo New value for writercheckpointinfo.
     **/
    public void setWritercheckpointinfo(byte[] writercheckpointinfo) {
        this.writercheckpointinfo = writercheckpointinfo;
    }

    /** {@inheritDoc} **/
    @Override public boolean equals(Object o) {
        if (this == o)
            return true;
        
        if (!(o instanceof StepExecution))
            return false;
        
        StepExecution that = (StepExecution)o;

        if (jobexecutionid != that.jobexecutionid)
            return false;
        

        if (version != null ? !version.equals(that.version) : that.version != null)
            return false;
        

        if (stepname != null ? !stepname.equals(that.stepname) : that.stepname != null)
            return false;
        

        if (starttime != null ? !starttime.equals(that.starttime) : that.starttime != null)
            return false;
        

        if (endtime != null ? !endtime.equals(that.endtime) : that.endtime != null)
            return false;
        

        if (batchstatus != null ? !batchstatus.equals(that.batchstatus) : that.batchstatus != null)
            return false;
        

        if (exitstatus != null ? !exitstatus.equals(that.exitstatus) : that.exitstatus != null)
            return false;
        

        if (executionexception != null ? !executionexception.equals(that.executionexception) : that.executionexception != null)
            return false;
        

        if (persistentuserdata != null ? !persistentuserdata.equals(that.persistentuserdata) : that.persistentuserdata != null)
            return false;
        

        if (readcount != null ? !readcount.equals(that.readcount) : that.readcount != null)
            return false;
        

        if (writecount != null ? !writecount.equals(that.writecount) : that.writecount != null)
            return false;
        

        if (commitcount != null ? !commitcount.equals(that.commitcount) : that.commitcount != null)
            return false;
        

        if (rollbackcount != null ? !rollbackcount.equals(that.rollbackcount) : that.rollbackcount != null)
            return false;
        

        if (readskipcount != null ? !readskipcount.equals(that.readskipcount) : that.readskipcount != null)
            return false;
        

        if (processskipcount != null ? !processskipcount.equals(that.processskipcount) : that.processskipcount != null)
            return false;
        

        if (filtercount != null ? !filtercount.equals(that.filtercount) : that.filtercount != null)
            return false;
        

        if (writeskipcount != null ? !writeskipcount.equals(that.writeskipcount) : that.writeskipcount != null)
            return false;
        

        if (readercheckpointinfo != null ? !readercheckpointinfo.equals(that.readercheckpointinfo) : that.readercheckpointinfo != null)
            return false;
        

        if (writercheckpointinfo != null ? !writercheckpointinfo.equals(that.writercheckpointinfo) : that.writercheckpointinfo != null)
            return false;
        
        return true;
    }

    /** {@inheritDoc} **/
    @Override public int hashCode() {
        int res = (int)(jobexecutionid ^ (jobexecutionid >>> 32));

        res = 31 * res + (version != null ? version.hashCode() : 0);

        res = 31 * res + (stepname != null ? stepname.hashCode() : 0);

        res = 31 * res + (starttime != null ? starttime.hashCode() : 0);

        res = 31 * res + (endtime != null ? endtime.hashCode() : 0);

        res = 31 * res + (batchstatus != null ? batchstatus.hashCode() : 0);

        res = 31 * res + (exitstatus != null ? exitstatus.hashCode() : 0);

        res = 31 * res + (executionexception != null ? executionexception.hashCode() : 0);

        res = 31 * res + (persistentuserdata != null ? persistentuserdata.hashCode() : 0);

        res = 31 * res + (readcount != null ? readcount.hashCode() : 0);

        res = 31 * res + (writecount != null ? writecount.hashCode() : 0);

        res = 31 * res + (commitcount != null ? commitcount.hashCode() : 0);

        res = 31 * res + (rollbackcount != null ? rollbackcount.hashCode() : 0);

        res = 31 * res + (readskipcount != null ? readskipcount.hashCode() : 0);

        res = 31 * res + (processskipcount != null ? processskipcount.hashCode() : 0);

        res = 31 * res + (filtercount != null ? filtercount.hashCode() : 0);

        res = 31 * res + (writeskipcount != null ? writeskipcount.hashCode() : 0);

        res = 31 * res + (readercheckpointinfo != null ? readercheckpointinfo.hashCode() : 0);

        res = 31 * res + (writercheckpointinfo != null ? writercheckpointinfo.hashCode() : 0);

        return res;
    }

    /** {@inheritDoc} **/
    @Override public String toString() {
        return "StepExecution [" + 
            "jobexecutionid=" + jobexecutionid + ", " + 
            "version=" + version + ", " + 
            "stepname=" + stepname + ", " + 
            "starttime=" + starttime + ", " + 
            "endtime=" + endtime + ", " + 
            "batchstatus=" + batchstatus + ", " + 
            "exitstatus=" + exitstatus + ", " + 
            "executionexception=" + executionexception + ", " + 
            "persistentuserdata=" + persistentuserdata + ", " + 
            "readcount=" + readcount + ", " + 
            "writecount=" + writecount + ", " + 
            "commitcount=" + commitcount + ", " + 
            "rollbackcount=" + rollbackcount + ", " + 
            "readskipcount=" + readskipcount + ", " + 
            "processskipcount=" + processskipcount + ", " + 
            "filtercount=" + filtercount + ", " + 
            "writeskipcount=" + writeskipcount + ", " + 
            "readercheckpointinfo=" + readercheckpointinfo + ", " + 
            "writercheckpointinfo=" + writercheckpointinfo +
        "]";
    }
}