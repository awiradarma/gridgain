package test.andre.jberet.model;

import java.io.Serializable;

/**
 * PartitionExecution definition.
 * 
 * This file was generated by Ignite Web Console (12/14/2020, 09:58)
 **/
public class PartitionExecution implements Serializable {
    /** */
    private static final long serialVersionUID = 0L;

    /** Value for version. */
    private Integer version;

    /** Value for batchstatus. */
    private String batchstatus;

    /** Value for exitstatus. */
    private String exitstatus;

    /** Value for executionexception. */
    private String executionexception;

    /** Value for persistentuserdata. */
    private byte[] persistentuserdata;

    /** Value for readercheckpointinfo. */
    private byte[] readercheckpointinfo;

    /** Value for writercheckpointinfo. */
    private byte[] writercheckpointinfo;

    /** Empty constructor. **/
    public PartitionExecution() {
        // No-op.
    }

    /** Full constructor. **/
    public PartitionExecution(Integer version,
        String batchstatus,
        String exitstatus,
        String executionexception,
        byte[] persistentuserdata,
        byte[] readercheckpointinfo,
        byte[] writercheckpointinfo) {
        this.version = version;
        this.batchstatus = batchstatus;
        this.exitstatus = exitstatus;
        this.executionexception = executionexception;
        this.persistentuserdata = persistentuserdata;
        this.readercheckpointinfo = readercheckpointinfo;
        this.writercheckpointinfo = writercheckpointinfo;
    }

    /**
     * Gets version
     * 
     * @return Value for version.
     **/
    public Integer getVersion() {
        return version;
    }

    /**
     * Sets version
     * 
     * @param version New value for version.
     **/
    public void setVersion(Integer version) {
        this.version = version;
    }

    /**
     * Gets batchstatus
     * 
     * @return Value for batchstatus.
     **/
    public String getBatchstatus() {
        return batchstatus;
    }

    /**
     * Sets batchstatus
     * 
     * @param batchstatus New value for batchstatus.
     **/
    public void setBatchstatus(String batchstatus) {
        this.batchstatus = batchstatus;
    }

    /**
     * Gets exitstatus
     * 
     * @return Value for exitstatus.
     **/
    public String getExitstatus() {
        return exitstatus;
    }

    /**
     * Sets exitstatus
     * 
     * @param exitstatus New value for exitstatus.
     **/
    public void setExitstatus(String exitstatus) {
        this.exitstatus = exitstatus;
    }

    /**
     * Gets executionexception
     * 
     * @return Value for executionexception.
     **/
    public String getExecutionexception() {
        return executionexception;
    }

    /**
     * Sets executionexception
     * 
     * @param executionexception New value for executionexception.
     **/
    public void setExecutionexception(String executionexception) {
        this.executionexception = executionexception;
    }

    /**
     * Gets persistentuserdata
     * 
     * @return Value for persistentuserdata.
     **/
    public byte[] getPersistentuserdata() {
        return persistentuserdata;
    }

    /**
     * Sets persistentuserdata
     * 
     * @param persistentuserdata New value for persistentuserdata.
     **/
    public void setPersistentuserdata(byte[] persistentuserdata) {
        this.persistentuserdata = persistentuserdata;
    }

    /**
     * Gets readercheckpointinfo
     * 
     * @return Value for readercheckpointinfo.
     **/
    public byte[] getReadercheckpointinfo() {
        return readercheckpointinfo;
    }

    /**
     * Sets readercheckpointinfo
     * 
     * @param readercheckpointinfo New value for readercheckpointinfo.
     **/
    public void setReadercheckpointinfo(byte[] readercheckpointinfo) {
        this.readercheckpointinfo = readercheckpointinfo;
    }

    /**
     * Gets writercheckpointinfo
     * 
     * @return Value for writercheckpointinfo.
     **/
    public byte[] getWritercheckpointinfo() {
        return writercheckpointinfo;
    }

    /**
     * Sets writercheckpointinfo
     * 
     * @param writercheckpointinfo New value for writercheckpointinfo.
     **/
    public void setWritercheckpointinfo(byte[] writercheckpointinfo) {
        this.writercheckpointinfo = writercheckpointinfo;
    }

    /** {@inheritDoc} **/
    @Override public boolean equals(Object o) {
        if (this == o)
            return true;
        
        if (!(o instanceof PartitionExecution))
            return false;
        
        PartitionExecution that = (PartitionExecution)o;

        if (version != null ? !version.equals(that.version) : that.version != null)
            return false;
        

        if (batchstatus != null ? !batchstatus.equals(that.batchstatus) : that.batchstatus != null)
            return false;
        

        if (exitstatus != null ? !exitstatus.equals(that.exitstatus) : that.exitstatus != null)
            return false;
        

        if (executionexception != null ? !executionexception.equals(that.executionexception) : that.executionexception != null)
            return false;
        

        if (persistentuserdata != null ? !persistentuserdata.equals(that.persistentuserdata) : that.persistentuserdata != null)
            return false;
        

        if (readercheckpointinfo != null ? !readercheckpointinfo.equals(that.readercheckpointinfo) : that.readercheckpointinfo != null)
            return false;
        

        if (writercheckpointinfo != null ? !writercheckpointinfo.equals(that.writercheckpointinfo) : that.writercheckpointinfo != null)
            return false;
        
        return true;
    }

    /** {@inheritDoc} **/
    @Override public int hashCode() {
        int res = version != null ? version.hashCode() : 0;

        res = 31 * res + (batchstatus != null ? batchstatus.hashCode() : 0);

        res = 31 * res + (exitstatus != null ? exitstatus.hashCode() : 0);

        res = 31 * res + (executionexception != null ? executionexception.hashCode() : 0);

        res = 31 * res + (persistentuserdata != null ? persistentuserdata.hashCode() : 0);

        res = 31 * res + (readercheckpointinfo != null ? readercheckpointinfo.hashCode() : 0);

        res = 31 * res + (writercheckpointinfo != null ? writercheckpointinfo.hashCode() : 0);

        return res;
    }

    /** {@inheritDoc} **/
    @Override public String toString() {
        return "PartitionExecution [" + 
            "version=" + version + ", " + 
            "batchstatus=" + batchstatus + ", " + 
            "exitstatus=" + exitstatus + ", " + 
            "executionexception=" + executionexception + ", " + 
            "persistentuserdata=" + persistentuserdata + ", " + 
            "readercheckpointinfo=" + readercheckpointinfo + ", " + 
            "writercheckpointinfo=" + writercheckpointinfo +
        "]";
    }
}