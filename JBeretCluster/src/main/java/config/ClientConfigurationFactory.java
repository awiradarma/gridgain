package config;

import com.mysql.cj.jdbc.MysqlDataSource;
import java.io.InputStream;
import java.sql.Timestamp;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Properties;
import javax.cache.configuration.Factory;
import javax.sql.DataSource;
import org.apache.ignite.cache.CacheAtomicityMode;
import org.apache.ignite.cache.CacheMode;
import org.apache.ignite.cache.QueryEntity;
import org.apache.ignite.cache.QueryIndex;
import org.apache.ignite.cache.QueryIndexType;
import org.apache.ignite.cache.store.jdbc.CacheJdbcPojoStoreFactory;
import org.apache.ignite.cache.store.jdbc.JdbcType;
import org.apache.ignite.cache.store.jdbc.JdbcTypeField;
import org.apache.ignite.cache.store.jdbc.dialect.MySQLDialect;
import org.apache.ignite.configuration.CacheConfiguration;
import org.apache.ignite.configuration.IgniteConfiguration;
import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;
import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;

/** This file was generated by Ignite Web Console (12/14/2020, 09:58) **/
public class ClientConfigurationFactory {
    /** Secret properties loading. **/
    private static final Properties props = new Properties();

    static {
        try (InputStream in = IgniteConfiguration.class.getClassLoader().getResourceAsStream("secret.properties")) {
            props.load(in);
        }
        catch (Exception ignored) {
            // No-op.
        }
    }

    /** Helper class for datasource creation. **/
    public static class DataSources {
        public static final MysqlDataSource INSTANCE_dsMySQL_Jberet = createdsMySQL_Jberet();

        private static MysqlDataSource createdsMySQL_Jberet() {
            MysqlDataSource dsMySQL_Jberet = new MysqlDataSource();

            dsMySQL_Jberet.setURL(props.getProperty("dsMySQL_Jberet.jdbc.url"));
            dsMySQL_Jberet.setUser(props.getProperty("dsMySQL_Jberet.jdbc.username"));
            dsMySQL_Jberet.setPassword(props.getProperty("dsMySQL_Jberet.jdbc.password"));

            return dsMySQL_Jberet;
        }
    }

    /**
     * Configure grid.
     * 
     * @return Ignite configuration.
     * @throws Exception If failed to construct Ignite configuration instance.
     **/
    public static IgniteConfiguration createConfiguration() throws Exception {
        IgniteConfiguration cfg = new IgniteConfiguration();

        cfg.setClientMode(true);
        cfg.setIgniteInstanceName("JberetCluster");

        TcpDiscoverySpi discovery = new TcpDiscoverySpi();

        TcpDiscoveryVmIpFinder ipFinder = new TcpDiscoveryVmIpFinder();

        ipFinder.setAddresses(Arrays.asList("127.0.0.1:47500..47510"));

        discovery.setIpFinder(ipFinder);

        cfg.setDiscoverySpi(discovery);

        cfg.setCacheConfiguration(
            cacheJobExecutionCache(),
            cacheJobInstanceCache(),
            cachePartitionExecutionCache(),
            cacheStepExecutionCache()
        );

        return cfg;
    }

    /**
     * Create configuration for cache "JobExecutionCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheJobExecutionCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("JobExecutionCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);
        ccfg.setCopyOnRead(true);
        ccfg.setSqlSchema("jberet");

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsMySQL_Jberet;
            };
        });

        cacheStoreFactory.setDialect(new MySQLDialect());

        cacheStoreFactory.setTypes(jdbcTypeJobExecution(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);
        ccfg.setEagerTtl(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Long");
        qryEntity.setValueType("test.andre.jberet.model.JobExecution");
        qryEntity.setTableName("JOB_EXECUTION");
        qryEntity.setKeyFieldName("jobexecutionid");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("jobexecutionid");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("jobinstanceid", "java.lang.Long");
        fields.put("version", "java.lang.Integer");
        fields.put("createtime", "java.sql.Timestamp");
        fields.put("starttime", "java.sql.Timestamp");
        fields.put("endtime", "java.sql.Timestamp");
        fields.put("lastupdatedtime", "java.sql.Timestamp");
        fields.put("batchstatus", "java.lang.String");
        fields.put("exitstatus", "java.lang.String");
        fields.put("jobparameters", "java.lang.String");
        fields.put("restartposition", "java.lang.String");
        fields.put("jobexecutionid", "java.lang.Long");

        qryEntity.setFields(fields);

        ArrayList<QueryIndex> indexes = new ArrayList<>();

        QueryIndex index = new QueryIndex();

        index.setName("FK_JOB_EXECUTION_JOB_INSTANCE");
        index.setIndexType(QueryIndexType.SORTED);

        LinkedHashMap<String, Boolean> indFlds = new LinkedHashMap<>();

        indFlds.put("jobinstanceid", false);

        index.setFields(indFlds);
        indexes.add(index);

        qryEntity.setIndexes(indexes);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeJobExecution".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeJobExecution(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(Long.class);
        type.setValueType("test.andre.jberet.model.JobExecution");
        type.setDatabaseSchema("jberet");
        type.setDatabaseTable("JOB_EXECUTION");

        type.setKeyFields(new JdbcTypeField(Types.BIGINT, "JOBEXECUTIONID", long.class, "jobexecutionid"));

        type.setValueFields(
            new JdbcTypeField(Types.BIGINT, "JOBINSTANCEID", long.class, "jobinstanceid"),
            new JdbcTypeField(Types.INTEGER, "VERSION", Integer.class, "version"),
            new JdbcTypeField(Types.TIMESTAMP, "CREATETIME", Timestamp.class, "createtime"),
            new JdbcTypeField(Types.TIMESTAMP, "STARTTIME", Timestamp.class, "starttime"),
            new JdbcTypeField(Types.TIMESTAMP, "ENDTIME", Timestamp.class, "endtime"),
            new JdbcTypeField(Types.TIMESTAMP, "LASTUPDATEDTIME", Timestamp.class, "lastupdatedtime"),
            new JdbcTypeField(Types.VARCHAR, "BATCHSTATUS", String.class, "batchstatus"),
            new JdbcTypeField(Types.VARCHAR, "EXITSTATUS", String.class, "exitstatus"),
            new JdbcTypeField(Types.VARCHAR, "JOBPARAMETERS", String.class, "jobparameters"),
            new JdbcTypeField(Types.VARCHAR, "RESTARTPOSITION", String.class, "restartposition")
        );

        return type;
    }

    /**
     * Create configuration for cache "JobInstanceCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheJobInstanceCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("JobInstanceCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);
        ccfg.setCopyOnRead(true);
        ccfg.setSqlSchema("jberet");

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsMySQL_Jberet;
            };
        });

        cacheStoreFactory.setDialect(new MySQLDialect());

        cacheStoreFactory.setTypes(jdbcTypeJobInstance(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);
        ccfg.setEagerTtl(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Long");
        qryEntity.setValueType("test.andre.jberet.model.JobInstance");
        qryEntity.setTableName("JOB_INSTANCE");
        qryEntity.setKeyFieldName("jobinstanceid");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("jobinstanceid");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("version", "java.lang.Integer");
        fields.put("jobname", "java.lang.String");
        fields.put("applicationname", "java.lang.String");
        fields.put("jobinstanceid", "java.lang.Long");

        qryEntity.setFields(fields);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeJobInstance".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeJobInstance(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(Long.class);
        type.setValueType("test.andre.jberet.model.JobInstance");
        type.setDatabaseSchema("jberet");
        type.setDatabaseTable("JOB_INSTANCE");

        type.setKeyFields(new JdbcTypeField(Types.BIGINT, "JOBINSTANCEID", long.class, "jobinstanceid"));

        type.setValueFields(
            new JdbcTypeField(Types.INTEGER, "VERSION", Integer.class, "version"),
            new JdbcTypeField(Types.VARCHAR, "JOBNAME", String.class, "jobname"),
            new JdbcTypeField(Types.VARCHAR, "APPLICATIONNAME", String.class, "applicationname")
        );

        return type;
    }

    /**
     * Create configuration for cache "PartitionExecutionCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cachePartitionExecutionCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("PartitionExecutionCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);
        ccfg.setCopyOnRead(true);
        ccfg.setSqlSchema("jberet");

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsMySQL_Jberet;
            };
        });

        cacheStoreFactory.setDialect(new MySQLDialect());

        cacheStoreFactory.setTypes(jdbcTypePartitionExecution(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);
        ccfg.setEagerTtl(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("test.andre.jberet.model.PartitionExecutionKey");
        qryEntity.setValueType("test.andre.jberet.model.PartitionExecution");
        qryEntity.setTableName("PARTITION_EXECUTION");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("partitionexecutionid");

        keyFields.add("stepexecutionid");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("partitionexecutionid", "java.lang.Integer");
        fields.put("stepexecutionid", "java.lang.Long");
        fields.put("version", "java.lang.Integer");
        fields.put("batchstatus", "java.lang.String");
        fields.put("exitstatus", "java.lang.String");
        fields.put("executionexception", "java.lang.String");
        fields.put("persistentuserdata", "[B");
        fields.put("readercheckpointinfo", "[B");
        fields.put("writercheckpointinfo", "[B");

        qryEntity.setFields(fields);

        ArrayList<QueryIndex> indexes = new ArrayList<>();

        QueryIndex index = new QueryIndex();

        index.setName("FK_PARTITION_EXE_STEP_EXE");
        index.setIndexType(QueryIndexType.SORTED);

        LinkedHashMap<String, Boolean> indFlds = new LinkedHashMap<>();

        indFlds.put("stepexecutionid", false);

        index.setFields(indFlds);
        indexes.add(index);

        qryEntity.setIndexes(indexes);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypePartitionExecution".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypePartitionExecution(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType("test.andre.jberet.model.PartitionExecutionKey");
        type.setValueType("test.andre.jberet.model.PartitionExecution");
        type.setDatabaseSchema("jberet");
        type.setDatabaseTable("PARTITION_EXECUTION");

        type.setKeyFields(
            new JdbcTypeField(Types.INTEGER, "PARTITIONEXECUTIONID", int.class, "partitionexecutionid"),
            new JdbcTypeField(Types.BIGINT, "STEPEXECUTIONID", long.class, "stepexecutionid")
        );

        type.setValueFields(
            new JdbcTypeField(Types.INTEGER, "VERSION", Integer.class, "version"),
            new JdbcTypeField(Types.VARCHAR, "BATCHSTATUS", String.class, "batchstatus"),
            new JdbcTypeField(Types.VARCHAR, "EXITSTATUS", String.class, "exitstatus"),
            new JdbcTypeField(Types.VARCHAR, "EXECUTIONEXCEPTION", String.class, "executionexception"),
            new JdbcTypeField(Types.LONGVARBINARY, "PERSISTENTUSERDATA", byte[].class, "persistentuserdata"),
            new JdbcTypeField(Types.LONGVARBINARY, "READERCHECKPOINTINFO", byte[].class, "readercheckpointinfo"),
            new JdbcTypeField(Types.LONGVARBINARY, "WRITERCHECKPOINTINFO", byte[].class, "writercheckpointinfo")
        );

        return type;
    }

    /**
     * Create configuration for cache "StepExecutionCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheStepExecutionCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("StepExecutionCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);
        ccfg.setCopyOnRead(true);
        ccfg.setSqlSchema("jberet");

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsMySQL_Jberet;
            };
        });

        cacheStoreFactory.setDialect(new MySQLDialect());

        cacheStoreFactory.setTypes(jdbcTypeStepExecution(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);
        ccfg.setEagerTtl(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Long");
        qryEntity.setValueType("test.andre.jberet.model.StepExecution");
        qryEntity.setTableName("STEP_EXECUTION");
        qryEntity.setKeyFieldName("stepexecutionid");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("stepexecutionid");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("jobexecutionid", "java.lang.Long");
        fields.put("version", "java.lang.Integer");
        fields.put("stepname", "java.lang.String");
        fields.put("starttime", "java.sql.Timestamp");
        fields.put("endtime", "java.sql.Timestamp");
        fields.put("batchstatus", "java.lang.String");
        fields.put("exitstatus", "java.lang.String");
        fields.put("executionexception", "java.lang.String");
        fields.put("persistentuserdata", "[B");
        fields.put("readcount", "java.lang.Integer");
        fields.put("writecount", "java.lang.Integer");
        fields.put("commitcount", "java.lang.Integer");
        fields.put("rollbackcount", "java.lang.Integer");
        fields.put("readskipcount", "java.lang.Integer");
        fields.put("processskipcount", "java.lang.Integer");
        fields.put("filtercount", "java.lang.Integer");
        fields.put("writeskipcount", "java.lang.Integer");
        fields.put("readercheckpointinfo", "[B");
        fields.put("writercheckpointinfo", "[B");
        fields.put("stepexecutionid", "java.lang.Long");

        qryEntity.setFields(fields);

        ArrayList<QueryIndex> indexes = new ArrayList<>();

        QueryIndex index = new QueryIndex();

        index.setName("FK_STEP_EXE_JOB_EXE");
        index.setIndexType(QueryIndexType.SORTED);

        LinkedHashMap<String, Boolean> indFlds = new LinkedHashMap<>();

        indFlds.put("jobexecutionid", false);

        index.setFields(indFlds);
        indexes.add(index);

        qryEntity.setIndexes(indexes);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeStepExecution".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeStepExecution(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(Long.class);
        type.setValueType("test.andre.jberet.model.StepExecution");
        type.setDatabaseSchema("jberet");
        type.setDatabaseTable("STEP_EXECUTION");

        type.setKeyFields(new JdbcTypeField(Types.BIGINT, "STEPEXECUTIONID", long.class, "stepexecutionid"));

        type.setValueFields(
            new JdbcTypeField(Types.BIGINT, "JOBEXECUTIONID", long.class, "jobexecutionid"),
            new JdbcTypeField(Types.INTEGER, "VERSION", Integer.class, "version"),
            new JdbcTypeField(Types.VARCHAR, "STEPNAME", String.class, "stepname"),
            new JdbcTypeField(Types.TIMESTAMP, "STARTTIME", Timestamp.class, "starttime"),
            new JdbcTypeField(Types.TIMESTAMP, "ENDTIME", Timestamp.class, "endtime"),
            new JdbcTypeField(Types.VARCHAR, "BATCHSTATUS", String.class, "batchstatus"),
            new JdbcTypeField(Types.VARCHAR, "EXITSTATUS", String.class, "exitstatus"),
            new JdbcTypeField(Types.VARCHAR, "EXECUTIONEXCEPTION", String.class, "executionexception"),
            new JdbcTypeField(Types.LONGVARBINARY, "PERSISTENTUSERDATA", byte[].class, "persistentuserdata"),
            new JdbcTypeField(Types.INTEGER, "READCOUNT", Integer.class, "readcount"),
            new JdbcTypeField(Types.INTEGER, "WRITECOUNT", Integer.class, "writecount"),
            new JdbcTypeField(Types.INTEGER, "COMMITCOUNT", Integer.class, "commitcount"),
            new JdbcTypeField(Types.INTEGER, "ROLLBACKCOUNT", Integer.class, "rollbackcount"),
            new JdbcTypeField(Types.INTEGER, "READSKIPCOUNT", Integer.class, "readskipcount"),
            new JdbcTypeField(Types.INTEGER, "PROCESSSKIPCOUNT", Integer.class, "processskipcount"),
            new JdbcTypeField(Types.INTEGER, "FILTERCOUNT", Integer.class, "filtercount"),
            new JdbcTypeField(Types.INTEGER, "WRITESKIPCOUNT", Integer.class, "writeskipcount"),
            new JdbcTypeField(Types.LONGVARBINARY, "READERCHECKPOINTINFO", byte[].class, "readercheckpointinfo"),
            new JdbcTypeField(Types.LONGVARBINARY, "WRITERCHECKPOINTINFO", byte[].class, "writercheckpointinfo")
        );

        return type;
    }
}